/**
 * 해시 테이블
 *  - Dynamic set을 구현하는 효과적인 방법 중 하나
 *  - 적절한 가정하에서 평균 탐색, 삽입, 삭제 시간 O(1)
 *  - 보통 최악의 경우 O(n)
 *  - 해시테이블은 일반적으로 하나의 배열
 * 
 * 해시 함수: h를 사용하여 키 k를 T[h(k)]에 저장
 *  - h: U -> {0, 1, ..., m-1}, 여기서 m은 테이블의 크기, U는 모든 가능한 키들의 집합
 *  - 키 k가 h(k)로 해슁되었다고 말함
 *  - index = h(k)
 *  - 해시 함수에 대한 값은 일정하다. 그래야만 해시 테이블에서 찾을 수 있음
 * 
 * 충돌
 *  - 두 개 이상의 키가 동일한 위치롷 해슁되는 경우
 *  - 대표적인 두 가지 충돌 해결 방법: chaining과 open addressing
 * 
 * Chaining에 의한 충돌 해결
 *  - 동일한 장소로 해슁된 모든 키들을 하나의 연결리스트로 저장
 * 
 * Open Addressing에 의한 충돌 해결
 *  - 모든 키를 해시 테이블 자체에 저장
 *  - 테이블의 각 슬롯에는 1개의 키만 저장
 *  - 충돌 해결기법: 
 *    ● Linear probling: 해시 값이 중복이 되면 그 다음 슬롯에 저장하는 방식
 *       - primary cluster: 키에 의해서 채워진 연속된 슬롯들을 의미
 *       - 단점: 이런 cluster가 생성되면 이 cluster는 점점 더 커지는 경향이 생김
 *    ● Quadratic probling: 충돌 발생시 h(k), h(k) + 1^2, h(k) + 2^2, ... 순서로 시도
 *    ● Dobule hashing: 서로 다른 두 해쉬 함수 h1과 h2를 이용한다
 * 
 * 해시 함수 기법
 *  - Division: h(k) = k mod m
 */